#!/usr/bin/bash

# usage: ogsshkeygen <name of key pair> <location to put new keys: default is ~/.ssh>

# quickly make a new ssh key with all my prefered settings

if [[ $# -eq 0 ]]; then
{
	echo 'Please provide basename of keypair! (ex. testKey, github, schoolServer)
usage: ogsshkeygen \
	<name of key pair> \
	<comment to put in key: default is name of key pair> \
	<KDF rounds: default is 100> \
	<location to put new keys: default is ~/.ssh>'
	echo $'Tip: use \'\' (empty string) as arg to force default'
	exit 1
} 1>&2
fi

baseName=$1
comment="${2:-${baseName}}"
kdfRounds="${3:-100}"
sshKeyDirWithPossibleTrailingSlash=${4:-${HOME}/.ssh}
sshKeyDir=$(sed 's:/*$::' <<< "${sshKeyDirWithPossibleTrailingSlash}")
# sed pattern matches an unlimited of forward slashes at the end of the string and
	# replaces them with nothing; thereby eliminating them. 

	# -a Controls the number of KDF (key derivation function) rounds used. The higher the number
		# the harder it is to crack the password (in case keys are stolen)
		# will result in slower password verification.
	# -t specifices the type of key to make. ed25519 is currently seens a great cryptographic algo
	# -f just details the file name of the key.
	# -C allows you to add a comment to your key if your would like

ssh-keygen -C "${comment}" -a "${kdfRounds}" -t ed25519 -f "${sshKeyDir}"/"${baseName}"
