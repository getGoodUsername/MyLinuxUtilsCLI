#!/usr/bin/bash

# must have already validated with isOgdimRunningInValidEnv
# if file names ever change, this is where you need to change them
# assuming that ogdim ($0) lives within my managed git repo, and
# all the other source files live there too.
function getSourceFilePath
{
    local -r key="$1"
    local -r repo_path="$(dirname "$(realpath "$0")")"
    local -Ar source_paths=(
        ["hw_brightness_ctl"]="/sys/class/backlight/intel_backlight/brightness"
        ["max_hw_brightness"]="/sys/class/backlight/intel_backlight/max_brightness"
        ["og_hw_brightness_source_code"]="${repo_path}/og_hardware_dim.c"
    );

    local -r result="${source_paths["${key}"]}"
    if ! [[  -e "$result" ]]; then
    {
        # shellcheck disable=SC2128
        echo "Please change function $FUNCNAME in $(basename "$0") to reflect actual source path"
        echo "Tried to get: $key -> Result: $result"
        exit 127;
    } 1>&2
    fi

    echo "$result"
}

function getFile
{
    local -r key="$1"
    local -Ar file_names=(
        # hardware dim related files
        ["hw_brightness_tracker"]="hardware_brightness_tracker"
        ["hw_brightness_ctl"]="hardware_brightness_controller"
        ["max_hw_brightness"]="max_hardware_brightness"
        ["og_hw_dim_enabled"]="og_hardware_dim_enabled"
        ["og_hw_brightness_source_code"]="og_hardware_dim_source_code.c"
        ["og_hw_dim_exec"]="og_hardware_dim"

        # software dim related files
        ["sw_brightness_tracker"]="software_brightness_tracker"
        ["sw_dim_xrandr_verbose_cache"]="software_dim_buffer"
        ["og_sw_dim_exec"]="og_software_dim"
    );

    echo "${OG_DIM_DIR}/${file_names["${key}"]}"
}

function isOgdimRunningInValidEnv
{
    # only run program from symbolic link to make handling of software
    # and hardware versions of ogdim cleaner and make version ctl easier
    if ! [[ -L "$0" ]]; then return 1; fi
    if [[ -z "$OG_DIM_DIR" ]]; then return 2; fi
}

function getUserInputFilePath
{
    local -r prompt="$1"
    read -rp "$prompt" path

    if ! [[ -e "$path" ]]; then
        echo "Make sure file '$path' exists!!!!" 1>&2
        return 1
    fi

    echo "$path"
}

function makeHardwareDimExecutable
{
    local -r exec_name="$(getFile og_hw_dim_exec)"
    local -r source_name="$(getFile og_hw_brightness_source_code)"

    gcc -O2 -o "$exec_name" "$source_name"
    echo 'Need root privileges to setup og hardware dim executable!'
    sudo chown root:root "$exec_name"
    sudo chmod 4555 "$exec_name"
    echo 'Finished setting up og hardware dim!!'
}

# will only recompile when source code is older than executable
function updateHardwareDimExecutable
{
    # if it ever gets more complicated, its time to use a makefile
    local -r exec_name="$(getFile og_hw_dim_exec)"
    local -r source_name="$(getFile og_hw_brightness_source_code)"
    local -ri source_code_modification_time="$(stat -L -c'%Y' "$source_name")"
    local -ri exec_modification_time="$(stat -L -c'%Y' "$exec_name")"
    # have file to check checksum of file, just incase file didn't even change
    # and was just touched

    if ! [[ "$source_code_modification_time" -gt "$exec_modification_time" ]]; then return 0; fi
    echo 'Message about needing to recompile og hardware dim since source code changed'
    makeHardwareDimExecutable
}

function isHardwareDimEnabled
{
    [[ -e "$(getFile og_hw_dim_enabled)" ]]
}

function initHardwareDim
{
    read -rp 'Enable hardware dimming? (must have software dimmable backlight) [y/n]: ' response
    if grep -q -v -i '^y' <<< "$response"; then return 0; fi

    for key in 'hw_brightness_ctl' 'max_hw_brightness' 'og_hw_brightness_source_code'; do
        ln -s "$(getSourceFilePath "$key")" "$(getFile "$key")"
    done

    touch "$(getFile og_hw_dim_enabled)" # if file exists, hw dim is enabled

    # og_hardware_dim requires tracker file to be owned by root and have
    # restrictive permissions, since set uid on exec, need to be safe!
    local -r brightness_tracker="$(getFile hw_brightness_tracker)"
    touch "$brightness_tracker"
    echo 'Need root privileges to setup brightness tracker file for hardware dim executable!'
    sudo chown root:root "$brightness_tracker"
    sudo chmod 644 "$brightness_tracker"
    echo 'Finished setting up brightness tracker!'
    makeHardwareDimExecutable
}

function initSoftwareDim
{
    ln -s "$(getSourceFilePath og_sw_dim_exec)" "$(getFile og_sw_dim_exec)"

    # no special permissions on the following files since
    # og_software_dim runs in normal user mode not root
    touch "$(getFile sw_brightness_tracker)"
    touch "$(getFile sw_dim_xrandr_verbose_cache)"
}


function initSetup
{
    echo 'Starting init setup'
    echo 'Checking ogdim environment'
    if ! isOgdimRunningInValidEnv; then
    {
        local -ar error_messages=(
            "$0 must be a symbolic link to original file in my linux utils folder!"
            "OG_DIM_DIR environment variable must be set!"
        )
        local -ir error_code="$?"
        local -ir error_index=$(( error_code - 1 ))

        echo "${error_messages["$error_index"]}"
        exit 1
    } 1>&2
    fi
    echo 'ogdim environment: passed'


    mkdir -p "$OG_DIM_DIR"
    initHardwareDim
    initSoftwareDim
    echo 'Finished init setup!'
}

function runHardwareDim
{
    local -ri hardware_dim_value="$1"
    updateHardwareDimExecutable
    "$(getFile og_hw_dim_exec)" "$hardware_dim_value" \
        "$(getFile hw_brightness_tracker)" \
        "$(getFile hw_brightness_ctl)" \
        "$(getFile max_hw_brightness)"
}

function isValidSoftwareDimValue
{
    local -r software_dim_value="$1"
    # bc return 1 when true, 0 when false
    local -ri upper_bound_check="$(bc <<< "$software_dim_value <= 1.0")"
    local -ri lower_bound_check="$(bc <<< "$software_dim_value >= 0.1")"

    [[ "$upper_bound_check" -gt 0 && "$lower_bound_check" -gt 0 ]]
}

function runSoftwareDim
{
    local -r software_dim_value="$1"

    if ! isValidSoftwareDimValue "$software_dim_value"; then
    {
        echo 'Invalid software dim value!'
        echo "Input: $software_dim_value"
        echo "Accepted range: [0.1, 1.0]"
        exit 1
    } 1>&2
    fi

    "$(getFile og_sw_dim_exec)" "$software_dim_value" \
        "$(getFile sw_brightness_tracker)" \
        "$(getFile sw_dim_xrandr_verbose_cache)"
}

function runDim
{
    local -r software_dim_value="$1"
    local -ri hardware_dim_value="$2"

    if isHardwareDimEnabled; then runHardwareDim "$hardware_dim_value"; fi
    runSoftwareDim "$software_dim_value"
}

function main
{
    local    software_dim_value
    local -i hardware_dim_value

    case "$1" in
        --init)
            initSetup
            echo "Ready to use ogdim! Go ahead give it a try!"
            exit 0;
            ;;
        [0-9]*)
            software_dim_value=$1
            hardware_dim_value=${2:-1}
            runDim "$software_dim_value" "$hardware_dim_value"
            exit 0;
            ;;
        "")
            software_dim_value=0.75
            hardware_dim_value=1
            runDim "$software_dim_value" "$hardware_dim_value"
            exit 0;
            ;;
    esac

}

main "$@"

# "/home/spaceface102/.og.d/Dim/brightness_tracker";
# "/sys/class/backlight/intel_backlight/brightness";
# "/sys/class/backlight/intel_backlight/max_brightness";
# OG_DIM_DIR

# TODO
# automatically reset/cleanup files that would be effected after error
# allow user to reset to valid state manually
# make more explicit if currently in dim state or not

# when init, record current state of brightness
# and revert to that state if any error is emitted from
# og_hardware/software_dim programs

# change architecture so ogdim decides when is already in dim state
# and og_hardware/software_dim only change brightness and make no decisions
# though ogdim will have to do some basic check to ensure security or I can make
# some sort of ogdim user/group so only ogdim exec can use the og_hardware_dim program
# with set uid permissions

# tasks being moved to ogdim
# make and store information about current brightness
# validating brightness values
# checking hardware max brightness


# defining new behavior for ogdim:
# when no args on ogdim, make default dim, or revert back to original pre dim brightness
# when there are args on ogdim, just change brightness to that value without overwriting
#   any stored brightness state
# make an option where user can define new brightness values to store to revert to when
#   going back to non dim state
# allow user to change default brightness values to revert to incase of error or maybe when
#   -d option is present